{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/classes/ball.js","webpack:///./src/classes/blocks.js","webpack:///./src/classes/g_view.js","webpack:///./src/classes/game.js","webpack:///./src/classes/moving_object.js","webpack:///./src/classes/player.js","webpack:///./src/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAwC;AACV;AACD;;AAE7B;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA,mBAAmB,sDAAS;AAC5B;AACA,oBAAoB,aAAa;AACjC;AACA,oBAAoB;AACpB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,+CAAM;AACtC;AACA;AACA,SAAS,8BAA8B,+CAAK;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;ACzGnB;AAAA;AAA0B;;AAE1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,6CAAI;AACpC;AACA;AACA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;;;;ACpCpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;ACpGpB;AAAA;AAAA;AAAA;AAA8B;AACJ;AACG;;AAE7B;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,+CAAM,iBAAiB;AACjD;AACA;AACA,wBAAwB,6CAAI,iBAAiB;AAC7C;AACA;AACA;AACA;;AAEA;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAK,EAAE,6BAA6B;AACzE;AACA,a;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAK,EAAE,6BAA6B;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C,SAAS;AACT,iCAAiC,WAAW;AAC5C;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,O;AACT,8CAA8C;AAC9C,+BAA+B;AAC/B,4CAA4C;AAC5C,6BAA6B;AAC7B,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA,gCAAgC,+CAAM;AACtC;AACA;AACA,gCAAgC,6CAAI;AACpC;AACA;AACA;AACA,gCAAgC,6CAAI;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,6CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mD;AACA,yB;AACA;AACA,qC;AACA,wB;AACA;AACA,sC;AACA,wB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,+CAAK;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,+BAA+B,mBAAmB;AAClD;AACA;AACA,oCAAoC,+CAAM,oBAAoB,6CAAI,GAAG;AACrE;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B,6CAAI,oBAAoB,+CAAM;AACzE;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B,6CAAI,oBAAoB,+CAAK;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;;;ACrNnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;AChB3B;AAAA;AAAA;AAA2C;AACjB;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA,qBAAqB,sDAAY;AACjC;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,6CAAI;AACpC,8B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,qEAAM,E;;;;;;;;;;;;AChDrB;AAAA;AAAA;AAAkC;AACG;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAI;AACjC,gBAAgB,uDAAK;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import MovingObj from './moving_object';\nimport Player from './player';\nimport Block from './blocks';\n\nconst BALL_RADIUS = 20;\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nclass Ball extends MovingObj {\n    constructor(pos) {\n        super(pos, { x: 0, y: 0 }, BALL_RADIUS);\n        this.color = randomColor();\n        this.dir = { x: 0, y: 0 }\n        this.spinSpeed = Math.random() * 60 + 30;\n        this.initialFlag = false;\n\n    };\n\n    draw(ctx) {\n        let rotateDir = Math.atan(this.dir.y / this.dir.x);\n        ctx.save();\n        ctx.translate(this.pos.x, this.pos.y);\n        ctx.rotate(rotateDir);\n        ctx.translate(-this.pos.x, -this.pos.y)\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.pos.x, this.pos.y, this.radius, 0, 2 * Math.PI, true);\n        ctx.fill();\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Player) {\n            this.bounce();\n            return true;\n        } else if (otherObj instanceof Block) {\n            this.bounce();\n            return true;\n        } else {\n            return false;\n        };\n    };\n\n    wallCollision() {\n        this.vel.x = -this.vel.x;\n        return true;\n    }\n\n    topWallCollision() {\n        this.vel.y = -this.vel.y;\n        return true;\n    }\n\n    bounce() {\n        if (this.dir.x !== 0 && this.dir.y !== 0) {\n            this.dir.x = -this.dir.x;\n            this.dir.y = -this.dir.y;\n            this.vel.y = -this.vel.y;\n        };\n    };\n\n    initialRotation() {\n        let rads = 90 * (Math.PI / 180);\n        this.dir.x = Math.cos(rads);\n        this.dir.y = Math.sin(rads);\n    };\n\n    rotate(deltaTime) {\n        if (this.dir.y !== 0) {\n            let angle = -this.spinSpeed * (Math.PI / 180) * deltaTime;\n            let vector = [this.dir.x, this.dir.y];\n\n            var cos = Math.cos(angle);\n            var sin = Math.sin(angle);\n\n            this.dir.x = Math.round(10000 * (vector[0] * cos - vector[1] * sin)) / 10000;\n            this.dir.y = Math.round(10000 * (vector[0] * sin + vector[1] * cos)) / 10000;\n        }\n    }\n\n    handleBallRelease(input, key) {\n        if (!this.initialFlag && key !== \"space\") {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n        } else if (key === \"space\" && this.dir.x === 0 && this.dir.y === 0) {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n            this.initialRotation();\n\n        }\n    };\n\n    move(deltaTime) {\n        super.move(deltaTime);\n        this.rotate(deltaTime);\n    };\n};\n\nexport default Ball;","import Ball from './ball';\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nconst powerUps = [\"multiball\", \"invinciball\", \"bomb\", \"wreckingBall\", \"longerBat\", \"tinyBat\"]; //\nconst blockTypes = [\"regular\", \"brick\", \"concrete\"];\nclass Block {\n    constructor(pos, width, height, type, powerUp) {\n        this.pos = pos;\n        this.width = width;\n        this.height = height;\n        this.color = randomColor();\n        this.type = type;\n        this.powerUp = powerUp;\n    }\n\n    draw(ctx) {\n        ctx.save();\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.pos.x, this.pos.y, this.width, this.height);\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Ball) {\n            otherObj.bounce();\n        };\n    };\n\n}\n\nexport default Block;","\n\nclass GVIEW {\n    constructor(game){\n        this.game = game;\n        this.input = {\n            a: [-45, 0],\n            d: [45, 0],\n            space: [0, -100]\n        };\n    };\n\n    keyHandler() {   \n        // const aButton = document.getElementById(\"a-btn\");\n        document.addEventListener(\"keydown\", event => {\n            this.handleKey(event, true);\n        });\n        document.addEventListener(\"keyup\", event => {\n            this.handleKey(event, false);\n        });\n    };\n\n    // senseGameOver() {\n    //     document.addEventListener(\"keydown\", event => {\n    //         this.gameOver(event, true);\n    //     });\n    // };\n\n    handleKey(event, down) {\n        // const aButton = document.getElementById(\"a-btn\");\n        // const dButton = document.getElementById(\"d-btn\");\n        // const spButton = document.getElementById(\"sp-btn\");\n        let input = this.input;\n        if (!this.game.ball.initialFlag) {\n            switch (event.keyCode) {\n                case 65:\n                    if (input.a !== down) {\n                        // aButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.a, Object.keys(this.input)[0]);\n                        this.game.ball.handleBallRelease(input.a, Object.keys(this.input)[0]);\n                    }\n                    break;\n                case 68:\n                    if (input.d !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.d, Object.keys(this.input)[0]);\n                        this.game.ball.handleBallRelease(input.d, Object.keys(this.input)[1]);\n                    }\n                    break;\n                case 32:\n                    if (input.space !== down) {\n                        // spButton.setAttribute(\"class\", \"active\");\n                        this.game.ball.initialFlag = true;\n                        this.game.ball.handleBallRelease(input.space, Object.keys(this.input)[2]);\n                    }\n                    break;\n                default:\n                    break;\n                }\n        } else {\n            switch (event.keyCode) {\n                case 65:\n                    if (input.a !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.a, Object.keys(this.input)[0]);\n                    }\n                    break;\n                case 68:\n                    if (input.d !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.d, Object.keys(this.input)[1]);\n                    }\n                    break;\n                default:\n                    break;\n            };     \n        };\n    };\n\n    start() {\n        this.keyHandler();\n        this.lastTime = new Date();\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    animate() {\n        if (!this.game.isOver()) {\n            const deltaT = (new Date() - this.lastTime) / 1000;\n            this.game.singleMove(deltaT)\n            this.game.draw();\n            this.lastTime = new Date();\n            requestAnimationFrame(this.animate.bind(this))\n        } else {\n            this.game.ctx.clearRect(0, 0, this.game.width, this.game.height);\n            const endScreen = document.querySelector(\".end-screen\");\n            endScreen.classList.add(\"end\");\n        }\n    };\n}\n\nexport default GVIEW;","import Player from \"./player\";\nimport Ball from './ball';\nimport Block from './blocks';\n\nconst HEIGHT = 600;\nconst WIDTH = 920;\nconst PLAYER_START_LOCATION = { x: 400, y: 540 }\nconst BALL_START_LOCATION = { x: 445, y: 500 }\nconst STARTING_LIVES = 3;\nconst BLOCK_HEIGHT = 50;\nconst BLOCK_WIDTH = 50;\nconst BLOCKS_NUM = 72;\n\nclass Game {\n    constructor(ctx) {\n        this.lives = STARTING_LIVES;\n        this.player = new Player(Object.assign({}, PLAYER_START_LOCATION));\n        this.ctx = ctx;\n        this.blocks = [];\n        this.ball = new Ball(Object.assign({}, BALL_START_LOCATION));\n        this.height = HEIGHT;\n        this.width = WIDTH;\n        this.themeColor = [\"#bdae57\"];\n        this.numBlocks = BLOCKS_NUM;\n\n        this.addBlocks(this.numBlocks);\n    };   \n     \n    addBlocks(n) {\n        let blockPosX = 10;\n        let blockPosY = 10;\n        let i = 0;\n        while (i < n) {\n            if (!this.blocks.length) {\n                this.blocks.push(new Block({ x: blockPosX, y: blockPosY }, BLOCK_WIDTH, BLOCK_HEIGHT));\n                i += 1;\n            } \n\n            blockPosX += BLOCK_WIDTH;\n            if (blockPosX > 890) {\n                blockPosX = 10;\n                blockPosY = blockPosY += BLOCK_HEIGHT;\n            }\n            this.blocks.push(new Block({ x: blockPosX, y: blockPosY }, BLOCK_WIDTH, BLOCK_HEIGHT));\n            i += 1;\n        };\n        return this.blocks;\n    };\n     \n    allCurObjects() {\n        return [].concat([this.player], [this.ball], this.blocks);\n    };\n\n    allCurMovingObjs() {\n        return [].concat([this.player], [this.ball]);\n    };\n \n    draw() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.ctx.fillStyle = this.themeColor[0];\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        this.ctx.font = \"30px Sans-Serif\";\n        this.ctx.fillStyle = \"#8a891f\";\n        if (this.lives > 1) {\n            this.ctx.fillText(`${this.lives} Lives Left`, 750, 580);\n        } else {\n            this.ctx.fillText(`${this.lives} Life Left`, 750, 580);\n        }\n        \n        this.allCurObjects().forEach(obj => {\n            obj.draw(this.ctx);\n        });\n    };\n\n    moveObjects(delta) {\n        const movingObj = this.allCurMovingObjs();\n        movingObj.forEach(obj => {\n            obj.move(delta);\n            if (obj instanceof Ball && this.isOutOfBounds(obj.pos.y)) {\n                this.deathAnimation();\n            };\n        });\n    };\n\n    singleMove(delta) {\n        this.moveObjects(delta);\n        this.checkForCollisions();\n        this.checkForWallCollisions();\n    };\n\n    isOutOfBounds(posY) {\n        if (posY > (560)) {\n            return true\n        } else {\n            return false;\n        };\n    };\n\n    deathAnimation() {\n        this.lives -= 1;\n        if (this.lives === 0) {\n            return \"Game Over!\"\n        } else {     \n            this.player.pos = Object.assign({}, PLAYER_START_LOCATION);\n            this.player.vel = { x: 0, y: 0 };\n            this.ball.pos = Object.assign({}, BALL_START_LOCATION);\n            this.ball.vel = { x: 0, y: 0 };\n            this.ball.dir = { x: 0, y: 0 };\n            this.ball.initialFlag = false;\n        }\n    };\n\n    checkForWallCollisions() {\n        const allMovingObj = this.allCurMovingObjs();\n        for (let i = 0; i < allMovingObj.length; i++) {\n            const obj = allMovingObj[i];\n            if ((obj instanceof Player) && (obj.pos.x < 0 || obj.pos.x > (920 - obj.width))) {\n                return obj.wallCollision();\n            }\n            if ((obj instanceof Ball) && (obj.pos.x < (0 + obj.radius) || obj.pos.x > (920 - obj.radius))) {\n                this.playBounceSound();\n                return obj.wallCollision();\n            }\n            if ((obj instanceof Ball) && (obj.pos.y < (0 + obj.radius) || obj.pos.y > (600 - obj.radius))) {\n                this.playBounceSound();\n                return obj.topWallCollision();\n            }\n        };\n    };\n\n    isOver() {\n        if (this.numBlocks === 0 || this.lives === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    isCollided(obj1, obj2) {\n        let temp;\n        if (obj1 instanceof Ball) {\n            temp = obj1;\n            obj1 = obj2;\n            obj2 = temp;\n        }\n        let dx = Math.abs(obj2.pos.x - obj1.pos.x - obj1.width / 2);\n        let dy = Math.abs(obj2.pos.y - obj1.pos.y - obj1.height / 2);\n        if (dx > (obj1.width / 2 + obj2.radius)) {\n            return false;\n        };\n        if (dy > (obj1.height / 2 + obj2.radius)) { \n            return false; \n        };\n        if (dx <= (obj1.width / 2)) { \n            return true; \n        };\n        if (dy <= (obj1.height / 2)) { \n            return true; \n        };\n        let dX = dx - obj1.width / 2;\n        let dY = dy - obj2.width / 2;\n        return (dX * dX + dY * dY <= (obj2.radius * obj2.radius));\n    };\n\n    remove(obj) {\n        if (obj instanceof Block) {\n            this.numBlocks -= 1;\n            this.blocks.splice(this.blocks.indexOf(obj), 1);\n        } else {\n            throw new Error(\"unknown type of object\");\n        };\n    }\n\n    checkForCollisions() {\n        const allObj = this.allCurObjects();\n        for (let i = 0; i < allObj.length; i++) {\n            for (let j = i + 1; j < allObj.length; j ++) {\n                const obj1 = allObj[i];\n                const obj2 = allObj[j];\n                if (obj1 instanceof Player && obj2 instanceof Ball) { //order basically ensures this\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playBounceSound();\n                        obj1.collidesWith(obj2);\n                    };\n                } else if (obj1 instanceof Ball && obj2 instanceof Player) {\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playBounceSound();\n                        obj1.collidesWith(obj2);\n                    };\n                } else if (obj1 instanceof Ball && obj2 instanceof Block) {\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playSound();\n                        obj1.collidesWith(obj2);\n                        this.remove(obj2);\n                    };\n                };\n            };\n        };\n    };\n\n    playSound() {\n        const ballSound = document.getElementById(\"blockSound\");\n        ballSound.currentTime = 0;\n        ballSound.play();\n    };\n\n    playBounceSound() {\n        const anotherSound = document.getElementById(\"anotherSound\");\n        anotherSound.currentTime = 0;\n        anotherSound.play();\n    };\n\n};\n\nexport default Game;","\nclass MovingObject {\n    constructor(pos, vel, radius) {\n        this.pos = pos;\n        this.vel = vel;\n        this.radius = radius;\n    };\n\n    move(deltaTime) {\n        let newDistanceX = this.vel.x * deltaTime;\n        let newDistanceY = this.vel.y * deltaTime;\n        this.pos.x = this.pos.x + newDistanceX;\n        this.pos.y = this.pos.y + newDistanceY;\n    }\n};\n\nexport default MovingObject;","import MovingObject from './moving_object';\nimport Ball from './ball';\nconst PLAYER_SPEED = 150;\nconst PLAYER_HEIGHT = 30;\nconst PLAYER_WIDTH = 90;\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nclass Player extends MovingObject {\n    constructor(pos) {\n        super(pos, { x: 0, y: 0 })\n        this.color = randomColor();\n        this.width = PLAYER_WIDTH;\n        this.height = PLAYER_HEIGHT;\n    };\n\n    setKeyInputs(input, key) {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n    };\n\n    draw(ctx) {\n        ctx.save();\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.pos.x, this.pos.y, this.width, this.height);\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Ball) {\n            otherObj.bounce(); \n        };\n    };\n\n    wallCollision() {\n        this.vel.x = -this.vel.x;\n        return true;\n    };\n\n};\n\nexport default Player;","import Game from \"./classes/game\";\nimport GView from \"./classes/g_view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    let github = document.getElementById(\"github\");\n    github.onclick = () => {\n        document.location.href = 'https://github.com/mwdeshaw';\n    }\n    let linkedin = document.getElementById(\"linkedin\");\n    linkedin.onclick = () => {\n        document.location.href = 'https://www.linkedin.com/in/matthew-deshaw-b629a0ba/';\n    }\n\n    const defScreen = document.getElementById(\"default\");\n    const powerBtn = document.getElementById(\"power-btn\");\n    powerBtn.onclick = () => {\n        defScreen.setAttribute(\"class\", \"active\");\n        const startScreen = document.getElementById('start-screen');\n        startScreen.setAttribute(\"class\", \"active\");\n\n        const light = document.getElementById('power-lt');\n        light.setAttribute(\"class\", \"active\");\n\n        const screenText = document.querySelector(\".start-text\");\n        const instructions = document.querySelector(\".instructions\");\n        const controlsList = document.querySelector(\".controls-list\");\n\n        screenText.classList.add(\"end\");\n        const startBtn = document.getElementById(\"start-game\");\n        setTimeout(() => {\n            const audio = document.getElementById(\"gameboySound\");\n            audio.currentTime = 0;\n            audio.play();\n            instructions.classList.add(\"end\");\n            controlsList.classList.add(\"end\");\n            startBtn.setAttribute(\"class\", \"active\");\n        }, 3000);\n\n        startBtn.onclick = () => {\n            startScreen.removeAttribute(\"class\");\n            instructions.classList.remove(\"end\");\n            controlsList.classList.remove(\"end\");\n            screenText.classList.remove(\"end\");\n            const canvas = document.getElementById(\"board\");\n            const ctx = canvas.getContext(\"2d\");\n            const game = new Game(ctx);\n            new GView(game).start();\n        };\n\n        if (defScreen.classList[0] === \"active\") {\n            powerBtn.onclick = () => {\n                defScreen.removeAttribute(\"class\");\n                startBtn.removeAttribute(\"class\");\n                startScreen.removeAttribute(\"class\");\n                screenText.classList.remove(\"end\");\n                instructions.classList.remove(\"end\");\n                controlsList.classList.remove(\"end\");\n                light.removeAttribute(\"class\");\n            };\n        };\n    };\n});"],"sourceRoot":""}