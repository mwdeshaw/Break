{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/classes/moving_object.js","webpack:///./src/classes/blocks.js","webpack:///./src/classes/ball.js","webpack:///./src/classes/player.js","webpack:///./src/classes/game.js","webpack:///./src/classes/g_view.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","moving_object","[object Object]","pos","vel","radius","this","deltaTime","newDistanceX","x","newDistanceY","y","randomColor","color","Math","floor","random","blocks","width","height","type","powerUp","ctx","save","fillStyle","fillRect","restore","otherObj","ball","bounce","BALL_RADIUS","ball_randomColor","super","dir","spinSpeed","initialFlag","rotateDir","atan","translate","rotate","beginPath","arc","PI","fill","player","rads","cos","sin","angle","vector","round","input","initialRotation","move","PLAYER_HEIGHT","PLAYER_WIDTH","player_randomColor","HEIGHT","WIDTH","PLAYER_START_LOCATION","BALL_START_LOCATION","STARTING_LIVES","BLOCK_HEIGHT","BLOCK_WIDTH","BLOCKS_NUM","classes_game","lives","assign","themeColor","numBlocks","addBlocks","blockPosX","blockPosY","length","push","concat","clearRect","font","fillText","allCurObjects","forEach","obj","draw","delta","allCurMovingObjs","isOutOfBounds","deathAnimation","moveObjects","checkForCollisions","checkForWallCollisions","posY","allMovingObj","wallCollision","playBounceSound","topWallCollision","obj1","obj2","temp","dx","abs","dy","dX","dY","Error","splice","indexOf","allObj","j","isCollided","collidesWith","playSound","remove","ballSound","document","getElementById","currentTime","play","anotherSound","g_view","game","a","space","addEventListener","event","handleKey","down","keyCode","setKeyInputs","keys","handleBallRelease","keyHandler","lastTime","Date","requestAnimationFrame","animate","isOver","querySelector","classList","add","deltaT","singleMove","onclick","location","href","defScreen","powerBtn","setAttribute","startScreen","light","screenText","instructions","controlsList","startBtn","setTimeout","audio","removeAttribute","getContext","start"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nclass MovingObject {\n    constructor(pos, vel, radius) {\n        this.pos = pos;\n        this.vel = vel;\n        this.radius = radius;\n    };\n\n    move(deltaTime) {\n        let newDistanceX = this.vel.x * deltaTime;\n        let newDistanceY = this.vel.y * deltaTime;\n        this.pos.x = this.pos.x + newDistanceX;\n        this.pos.y = this.pos.y + newDistanceY;\n    }\n};\n\nexport default MovingObject;","import Ball from './ball';\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nconst powerUps = [\"multiball\", \"invinciball\", \"bomb\", \"wreckingBall\", \"longerBat\", \"tinyBat\"]; //\nconst blockTypes = [\"regular\", \"brick\", \"concrete\"];\nclass Block {\n    constructor(pos, width, height, type, powerUp) {\n        this.pos = pos;\n        this.width = width;\n        this.height = height;\n        this.color = randomColor();\n        this.type = type;\n        this.powerUp = powerUp;\n    }\n\n    draw(ctx) {\n        ctx.save();\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.pos.x, this.pos.y, this.width, this.height);\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Ball) {\n            otherObj.bounce();\n        };\n    };\n\n}\n\nexport default Block;","import MovingObj from './moving_object';\nimport Player from './player';\nimport Block from './blocks';\n\nconst BALL_RADIUS = 20;\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nclass Ball extends MovingObj {\n    constructor(pos) {\n        super(pos, { x: 0, y: 0 }, BALL_RADIUS);\n        this.color = randomColor();\n        this.dir = { x: 0, y: 0 }\n        this.spinSpeed = Math.random() * 60 + 30;\n        this.initialFlag = false;\n\n    };\n\n    draw(ctx) {\n        let rotateDir = Math.atan(this.dir.y / this.dir.x);\n        ctx.save();\n        ctx.translate(this.pos.x, this.pos.y);\n        ctx.rotate(rotateDir);\n        ctx.translate(-this.pos.x, -this.pos.y)\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.pos.x, this.pos.y, this.radius, 0, 2 * Math.PI, true);\n        ctx.fill();\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Player) {\n            this.bounce();\n            return true;\n        } else if (otherObj instanceof Block) {\n            this.bounce();\n            return true;\n        } else {\n            return false;\n        };\n    };\n\n    wallCollision() {\n        this.vel.x = -this.vel.x;\n        return true;\n    }\n\n    topWallCollision() {\n        this.vel.y = -this.vel.y;\n        return true;\n    }\n\n    bounce() {\n        if (this.dir.x !== 0 && this.dir.y !== 0) {\n            this.dir.x = -this.dir.x;\n            this.dir.y = -this.dir.y;\n            this.vel.y = -this.vel.y;\n        };\n    };\n\n    initialRotation() {\n        let rads = 90 * (Math.PI / 180);\n        this.dir.x = Math.cos(rads);\n        this.dir.y = Math.sin(rads);\n    };\n\n    rotate(deltaTime) {\n        if (this.dir.y !== 0) {\n            let angle = -this.spinSpeed * (Math.PI / 180) * deltaTime;\n            let vector = [this.dir.x, this.dir.y];\n\n            var cos = Math.cos(angle);\n            var sin = Math.sin(angle);\n\n            this.dir.x = Math.round(10000 * (vector[0] * cos - vector[1] * sin)) / 10000;\n            this.dir.y = Math.round(10000 * (vector[0] * sin + vector[1] * cos)) / 10000;\n        }\n    }\n\n    handleBallRelease(input, key) {\n        if (!this.initialFlag && key !== \"space\") {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n        } else if (key === \"space\" && this.dir.x === 0 && this.dir.y === 0) {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n            this.initialRotation();\n\n        }\n    };\n\n    move(deltaTime) {\n        super.move(deltaTime);\n        this.rotate(deltaTime);\n    };\n};\n\nexport default Ball;","import MovingObject from './moving_object';\nimport Ball from './ball';\nconst PLAYER_SPEED = 150;\nconst PLAYER_HEIGHT = 30;\nconst PLAYER_WIDTH = 90;\n\nconst randomColor = () => {\n    const digs = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n        color += digs[Math.floor((Math.random() * 16))];\n    }\n    return color;\n};\n\nclass Player extends MovingObject {\n    constructor(pos) {\n        super(pos, { x: 0, y: 0 })\n        this.color = randomColor();\n        this.width = PLAYER_WIDTH;\n        this.height = PLAYER_HEIGHT;\n    };\n\n    setKeyInputs(input, key) {\n            this.vel.x += input[0];\n            this.vel.y += input[1];\n    };\n\n    draw(ctx) {\n        ctx.save();\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.pos.x, this.pos.y, this.width, this.height);\n        ctx.restore();\n    };\n\n    collidesWith(otherObj) {\n        if (otherObj instanceof Ball) {\n            otherObj.bounce(); \n        };\n    };\n\n    wallCollision() {\n        this.vel.x = -this.vel.x;\n        return true;\n    };\n\n};\n\nexport default Player;","import Player from \"./player\";\nimport Ball from './ball';\nimport Block from './blocks';\n\nconst HEIGHT = 600;\nconst WIDTH = 920;\nconst PLAYER_START_LOCATION = { x: 400, y: 540 }\nconst BALL_START_LOCATION = { x: 445, y: 500 }\nconst STARTING_LIVES = 3;\nconst BLOCK_HEIGHT = 50;\nconst BLOCK_WIDTH = 50;\nconst BLOCKS_NUM = 72;\n\nclass Game {\n    constructor(ctx) {\n        this.lives = STARTING_LIVES;\n        this.player = new Player(Object.assign({}, PLAYER_START_LOCATION));\n        this.ctx = ctx;\n        this.blocks = [];\n        this.ball = new Ball(Object.assign({}, BALL_START_LOCATION));\n        this.height = HEIGHT;\n        this.width = WIDTH;\n        this.themeColor = [\"#bdae57\"];\n        this.numBlocks = BLOCKS_NUM;\n\n        this.addBlocks(this.numBlocks);\n    };   \n     \n    addBlocks(n) {\n        let blockPosX = 10;\n        let blockPosY = 10;\n        let i = 0;\n        while (i < n) {\n            if (!this.blocks.length) {\n                this.blocks.push(new Block({ x: blockPosX, y: blockPosY }, BLOCK_WIDTH, BLOCK_HEIGHT));\n                i += 1;\n            } \n\n            blockPosX += BLOCK_WIDTH;\n            if (blockPosX > 890) {\n                blockPosX = 10;\n                blockPosY = blockPosY += BLOCK_HEIGHT;\n            }\n            this.blocks.push(new Block({ x: blockPosX, y: blockPosY }, BLOCK_WIDTH, BLOCK_HEIGHT));\n            i += 1;\n        };\n        return this.blocks;\n    };\n     \n    allCurObjects() {\n        return [].concat([this.player], [this.ball], this.blocks);\n    };\n\n    allCurMovingObjs() {\n        return [].concat([this.player], [this.ball]);\n    };\n \n    draw() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.ctx.fillStyle = this.themeColor[0];\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        this.ctx.font = \"30px Sans-Serif\";\n        this.ctx.fillStyle = \"#8a891f\";\n        if (this.lives > 1) {\n            this.ctx.fillText(`${this.lives} Lives Left`, 750, 580);\n        } else {\n            this.ctx.fillText(`${this.lives} Life Left`, 750, 580);\n        }\n        \n        this.allCurObjects().forEach(obj => {\n            obj.draw(this.ctx);\n        });\n    };\n\n    moveObjects(delta) {\n        const movingObj = this.allCurMovingObjs();\n        movingObj.forEach(obj => {\n            obj.move(delta);\n            if (obj instanceof Ball && this.isOutOfBounds(obj.pos.y)) {\n                this.deathAnimation();\n            };\n        });\n    };\n\n    singleMove(delta) {\n        this.moveObjects(delta);\n        this.checkForCollisions();\n        this.checkForWallCollisions();\n    };\n\n    isOutOfBounds(posY) {\n        if (posY > (560)) {\n            return true\n        } else {\n            return false;\n        };\n    };\n\n    deathAnimation() {\n        this.lives -= 1;\n        if (this.lives === 0) {\n            return \"Game Over!\"\n        } else {     \n            this.player.pos = Object.assign({}, PLAYER_START_LOCATION);\n            this.player.vel = { x: 0, y: 0 };\n            this.ball.pos = Object.assign({}, BALL_START_LOCATION);\n            this.ball.vel = { x: 0, y: 0 };\n            this.ball.dir = { x: 0, y: 0 };\n            this.ball.initialFlag = false;\n        }\n    };\n\n    checkForWallCollisions() {\n        const allMovingObj = this.allCurMovingObjs();\n        for (let i = 0; i < allMovingObj.length; i++) {\n            const obj = allMovingObj[i];\n            if ((obj instanceof Player) && (obj.pos.x < 0 || obj.pos.x > (920 - obj.width))) {\n                return obj.wallCollision();\n            }\n            if ((obj instanceof Ball) && (obj.pos.x < (0 + obj.radius) || obj.pos.x > (920 - obj.radius))) {\n                this.playBounceSound();\n                return obj.wallCollision();\n            }\n            if ((obj instanceof Ball) && (obj.pos.y < (0 + obj.radius) || obj.pos.y > (600 - obj.radius))) {\n                this.playBounceSound();\n                return obj.topWallCollision();\n            }\n        };\n    };\n\n    isOver() {\n        if (this.numBlocks === 0 || this.lives === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    isCollided(obj1, obj2) {\n        let temp;\n        if (obj1 instanceof Ball) {\n            temp = obj1;\n            obj1 = obj2;\n            obj2 = temp;\n        }\n        let dx = Math.abs(obj2.pos.x - obj1.pos.x - obj1.width / 2);\n        let dy = Math.abs(obj2.pos.y - obj1.pos.y - obj1.height / 2);\n        if (dx > (obj1.width / 2 + obj2.radius)) {\n            return false;\n        };\n        if (dy > (obj1.height / 2 + obj2.radius)) { \n            return false; \n        };\n        if (dx <= (obj1.width / 2)) { \n            return true; \n        };\n        if (dy <= (obj1.height / 2)) { \n            return true; \n        };\n        let dX = dx - obj1.width / 2;\n        let dY = dy - obj2.width / 2;\n        return (dX * dX + dY * dY <= (obj2.radius * obj2.radius));\n    };\n\n    remove(obj) {\n        if (obj instanceof Block) {\n            this.numBlocks -= 1;\n            this.blocks.splice(this.blocks.indexOf(obj), 1);\n        } else {\n            throw new Error(\"unknown type of object\");\n        };\n    }\n\n    checkForCollisions() {\n        const allObj = this.allCurObjects();\n        for (let i = 0; i < allObj.length; i++) {\n            for (let j = i + 1; j < allObj.length; j ++) {\n                const obj1 = allObj[i];\n                const obj2 = allObj[j];\n                if (obj1 instanceof Player && obj2 instanceof Ball) { //order basically ensures this\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playBounceSound();\n                        obj1.collidesWith(obj2);\n                    };\n                } else if (obj1 instanceof Ball && obj2 instanceof Player) {\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playBounceSound();\n                        obj1.collidesWith(obj2);\n                    };\n                } else if (obj1 instanceof Ball && obj2 instanceof Block) {\n                    if (this.isCollided(obj1, obj2)) {\n                        this.playSound();\n                        obj1.collidesWith(obj2);\n                        this.remove(obj2);\n                    };\n                };\n            };\n        };\n    };\n\n    playSound() {\n        const ballSound = document.getElementById(\"blockSound\");\n        ballSound.currentTime = 0;\n        ballSound.play();\n    };\n\n    playBounceSound() {\n        const anotherSound = document.getElementById(\"anotherSound\");\n        anotherSound.currentTime = 0;\n        anotherSound.play();\n    };\n\n};\n\nexport default Game;","\n\nclass GVIEW {\n    constructor(game){\n        this.game = game;\n        this.input = {\n            a: [-45, 0],\n            d: [45, 0],\n            space: [0, -100]\n        };\n    };\n\n    keyHandler() {   \n        // const aButton = document.getElementById(\"a-btn\");\n        document.addEventListener(\"keydown\", event => {\n            this.handleKey(event, true);\n        });\n        document.addEventListener(\"keyup\", event => {\n            this.handleKey(event, false);\n        });\n    };\n\n    // senseGameOver() {\n    //     document.addEventListener(\"keydown\", event => {\n    //         this.gameOver(event, true);\n    //     });\n    // };\n\n    handleKey(event, down) {\n        // const aButton = document.getElementById(\"a-btn\");\n        // const dButton = document.getElementById(\"d-btn\");\n        // const spButton = document.getElementById(\"sp-btn\");\n        let input = this.input;\n        if (!this.game.ball.initialFlag) {\n            switch (event.keyCode) {\n                case 65:\n                    if (input.a !== down) {\n                        // aButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.a, Object.keys(this.input)[0]);\n                        this.game.ball.handleBallRelease(input.a, Object.keys(this.input)[0]);\n                    }\n                    break;\n                case 68:\n                    if (input.d !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.d, Object.keys(this.input)[0]);\n                        this.game.ball.handleBallRelease(input.d, Object.keys(this.input)[1]);\n                    }\n                    break;\n                case 32:\n                    if (input.space !== down) {\n                        // spButton.setAttribute(\"class\", \"active\");\n                        this.game.ball.initialFlag = true;\n                        this.game.ball.handleBallRelease(input.space, Object.keys(this.input)[2]);\n                    }\n                    break;\n                default:\n                    break;\n                }\n        } else {\n            switch (event.keyCode) {\n                case 65:\n                    if (input.a !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.a, Object.keys(this.input)[0]);\n                    }\n                    break;\n                case 68:\n                    if (input.d !== down) {\n                        // dButton.setAttribute(\"class\", \"active\");\n                        this.game.player.setKeyInputs(input.d, Object.keys(this.input)[1]);\n                    }\n                    break;\n                default:\n                    break;\n            };     \n        };\n    };\n\n    start() {\n        this.keyHandler();\n        this.lastTime = new Date();\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    animate() {\n        if (!this.game.isOver()) {\n            const deltaT = (new Date() - this.lastTime) / 1000;\n            this.game.singleMove(deltaT)\n            this.game.draw();\n            this.lastTime = new Date();\n            requestAnimationFrame(this.animate.bind(this))\n        } else {\n            this.game.ctx.clearRect(0, 0, this.game.width, this.game.height);\n            const endScreen = document.querySelector(\".end-screen\");\n            endScreen.classList.add(\"end\");\n        }\n    };\n}\n\nexport default GVIEW;","import Game from \"./classes/game\";\nimport GView from \"./classes/g_view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    let github = document.getElementById(\"github\");\n    github.onclick = () => {\n        document.location.href = 'https://github.com/mwdeshaw';\n    }\n    let linkedin = document.getElementById(\"linkedin\");\n    linkedin.onclick = () => {\n        document.location.href = 'https://www.linkedin.com/in/matthew-deshaw-b629a0ba/';\n    }\n\n    const defScreen = document.getElementById(\"default\");\n    const powerBtn = document.getElementById(\"power-btn\");\n    powerBtn.onclick = () => {\n        defScreen.setAttribute(\"class\", \"active\");\n        const startScreen = document.getElementById('start-screen');\n        startScreen.setAttribute(\"class\", \"active\");\n\n        const light = document.getElementById('power-lt');\n        light.setAttribute(\"class\", \"active\");\n\n        const screenText = document.querySelector(\".start-text\");\n        const instructions = document.querySelector(\".instructions\");\n        const controlsList = document.querySelector(\".controls-list\");\n\n        screenText.classList.add(\"end\");\n        const startBtn = document.getElementById(\"start-game\");\n        setTimeout(() => {\n            const audio = document.getElementById(\"gameboySound\");\n            audio.currentTime = 0;\n            audio.play();\n            instructions.classList.add(\"end\");\n            controlsList.classList.add(\"end\");\n            startBtn.setAttribute(\"class\", \"active\");\n        }, 3000);\n\n        startBtn.onclick = () => {\n            startScreen.removeAttribute(\"class\");\n            instructions.classList.remove(\"end\");\n            controlsList.classList.remove(\"end\");\n            screenText.classList.remove(\"end\");\n            const canvas = document.getElementById(\"board\");\n            const ctx = canvas.getContext(\"2d\");\n            const game = new Game(ctx);\n            new GView(game).start();\n        };\n\n        if (defScreen.classList[0] === \"active\") {\n            powerBtn.onclick = () => {\n                defScreen.removeAttribute(\"class\");\n                startBtn.removeAttribute(\"class\");\n                startScreen.removeAttribute(\"class\");\n                screenText.classList.remove(\"end\");\n                instructions.classList.remove(\"end\");\n                controlsList.classList.remove(\"end\");\n                light.removeAttribute(\"class\");\n            };\n        };\n    };\n});"],"sourceRoot":""}